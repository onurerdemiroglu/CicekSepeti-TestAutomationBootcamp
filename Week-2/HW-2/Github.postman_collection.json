{
	"info": {
		"_postman_id": "dd664ed0-2a12-4296-9698-32508a87767d",
		"name": "Github",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Users Profile",
			"item": [
				{
					"name": "Get Authenticated User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Check response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.login).to.eql(\"ciceksepetibp\");\r",
									"    pm.expect(jsonData.id).to.eql(95372333);\r",
									"});\r",
									"\r",
									"pm.test(\"response should be okay to process\", function () { \r",
									"    pm.response.to.not.be.error; \r",
									"    pm.response.to.not.have.jsonBody(\"\"); \r",
									"    pm.response.to.not.have.jsonBody(\"error\"); \r",
									"});\r",
									"\r",
									"pm.test(\"API response contains the expected fields\", () => {\r",
									"  const response = pm.response.json();\r",
									"  pm.expect(response).to.have.property(\"type\", \"User\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User's Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Check response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.login).to.eql(\"onurerdemiroglu\");\r",
									"    pm.expect(jsonData.type).to.eql(\"User\");\r",
									"});\r",
									"\r",
									"pm.test(\"response should be okay to process\", function () { \r",
									"    pm.response.to.not.be.error; \r",
									"    pm.response.to.not.have.jsonBody(\"\"); \r",
									"    pm.response.to.not.have.jsonBody(\"error\"); \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{username}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{username}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Public Email Addresses Auth User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Check response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].email).to.eql(\"95372333+ciceksepetibp@users.noreply.github.com\");\r",
									"    pm.expect(jsonData[0].verified).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"response should be okay to process\", function () { \r",
									"    pm.response.to.not.be.error; \r",
									"    pm.response.to.not.have.jsonBody(\"\"); \r",
									"    pm.response.to.not.have.jsonBody(\"error\"); \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/public_emails",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"public_emails"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Email for Auth User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Check response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[2].email).to.eql(\"onurerdemiroglu1@gmail.com\");\r",
									"    pm.expect(jsonData[3].email).to.eql(\"onurerdemiroglu2@gmail.com\");\r",
									"    pm.expect(jsonData[4].email).to.eql(\"onurerdemiroglu3@gmail.com\");\r",
									"});\r",
									"\r",
									"pm.test(\"response should be okay to process\", function () { \r",
									"    pm.response.to.not.be.error; \r",
									"    pm.response.to.not.have.jsonBody(\"\"); \r",
									"    pm.response.to.not.have.jsonBody(\"error\"); \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\"onurerdemiroglu1@gmail.com\",\"onurerdemiroglu2@gmail.com\",\"onurerdemiroglu3@gmail.com\"]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/emails",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"emails"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Email for Auth User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"  pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\"onurerdemiroglu1@gmail.com\",\"onurerdemiroglu2@gmail.com\",\"onurerdemiroglu3@gmail.com\"]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/emails",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"emails"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Block",
			"item": [
				{
					"name": "Blocking Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Check response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].login).to.eql(\"onurerdemiroglu\");\r",
									"    pm.expect(jsonData[0].type).to.eql(\"User\");\r",
									"});\r",
									"\r",
									"pm.test(\"response should be okay to process\", function () { \r",
									"    pm.response.to.not.be.error; \r",
									"    pm.response.to.not.have.jsonBody(\"\"); \r",
									"    pm.response.to.not.have.jsonBody(\"error\"); \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/blocks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"blocks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Is User Blocked",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"  pm.response.to.have.status(204);\r",
									"});\r",
									" \r",
									"pm.test(\"Response time is less than 500ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// If the user is blocked           Status: 204 No Content\r",
									"// Not modified                     Status: 304 Not Modified\r",
									"// Requires authentication          Status: 401 Unauthorized\r",
									"// Forbidden                        Status: 403 Forbidden\r",
									"// If the user is not blocked       Status: 404 Not Found"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/blocks/{{username}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"blocks",
								"{{username}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Follow",
			"item": [
				{
					"name": "List Followers Auth User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Check response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].login).to.eql(\"postmanlistfollowtest\");\r",
									"    pm.expect(jsonData[0].type).to.eql(\"User\");\r",
									"});\r",
									"\r",
									"pm.test(\"response should be okay to process\", function () { \r",
									"    pm.response.to.not.be.error; \r",
									"    pm.response.to.not.have.jsonBody(\"\"); \r",
									"    pm.response.to.not.have.jsonBody(\"error\"); \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/followers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"followers"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Following Auth User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Check response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].login).to.eql(\"ozgurkayaist\");\r",
									"    pm.expect(jsonData[0].type).to.eql(\"User\");\r",
									"});\r",
									"\r",
									"pm.test(\"response should be okay to process\", function () { \r",
									"    pm.response.to.not.be.error; \r",
									"    pm.response.to.not.have.jsonBody(\"\"); \r",
									"    pm.response.to.not.have.jsonBody(\"error\"); \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/following",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"following"
							]
						}
					},
					"response": []
				},
				{
					"name": "List followers of a User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Check response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].login).to.eql(\"BoraKutay\");\r",
									"    pm.expect(jsonData[0].type).to.eql(\"User\");\r",
									"});\r",
									"\r",
									"pm.test(\"response should be okay to process\", function () { \r",
									"    pm.response.to.not.be.error; \r",
									"    pm.response.to.not.have.jsonBody(\"\"); \r",
									"    pm.response.to.not.have.jsonBody(\"error\"); \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{username}}/followers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{username}}",
								"followers"
							]
						}
					},
					"response": []
				},
				{
					"name": "List followings of a User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Check response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].login).to.eql(\"berkaypab\");\r",
									"    pm.expect(jsonData[0].type).to.eql(\"User\");\r",
									"});\r",
									"\r",
									"pm.test(\"response should be okay to process\", function () { \r",
									"    pm.response.to.not.be.error; \r",
									"    pm.response.to.not.have.jsonBody(\"\"); \r",
									"    pm.response.to.not.have.jsonBody(\"error\"); \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{username}}/following",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{username}}",
								"following"
							]
						}
					},
					"response": []
				},
				{
					"name": "Follow a User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"  pm.response.to.have.status(204);\r",
									"});\r",
									" \r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/following/{{username}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"following",
								"{{username}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unfollow a User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"  pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/following/{{username}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"following",
								"{{username}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Search",
			"item": [
				{
					"name": "Search Commits",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Check response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.items[0].commit.author.email).to.eql(\"onurerdemiroglu@gmail.com\"); \r",
									"    pm.expect(jsonData.items[0].commit.author.name).to.eql(\"onurerdemirrr\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"response should be okay to process\", function () { \r",
									"    pm.response.to.not.be.error; \r",
									"    pm.response.to.not.have.jsonBody(\"\"); \r",
									"    pm.response.to.not.have.jsonBody(\"error\"); \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/search/commits?q={{commits}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"search",
								"commits"
							],
							"query": [
								{
									"key": "q",
									"value": "{{commits}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Repositories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Check response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.items[0].owner.login).to.eql(\"Ramedeus\"); \r",
									"    pm.expect(jsonData.items[0].full_name).to.eql(\"Ramedeus/Java_101_Kodluyoruz_Patika.dev\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"response should be okay to process\", function () { \r",
									"    pm.response.to.not.be.error; \r",
									"    pm.response.to.not.have.jsonBody(\"\"); \r",
									"    pm.response.to.not.have.jsonBody(\"error\"); \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/search/repositories?q={{repositoryname}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"search",
								"repositories"
							],
							"query": [
								{
									"key": "q",
									"value": "{{repositoryname}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Topics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Check response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.items[0].name).to.eql(\"test-automation\"); \r",
									"    pm.expect(jsonData.items[1].short_description).to.eql(\"Gradle is an open-source build tool that helps teams build, automate and deliver better software, faster.\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"response should be okay to process\", function () { \r",
									"    pm.response.to.not.be.error; \r",
									"    pm.response.to.not.have.jsonBody(\"\"); \r",
									"    pm.response.to.not.have.jsonBody(\"error\"); \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/search/topics?q={{topics}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"search",
								"topics"
							],
							"query": [
								{
									"key": "q",
									"value": "{{topics}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Check response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.items[0].login).to.eql(\"onurerdemiroglu\"); \r",
									"    pm.expect(jsonData.items[0].url).to.eql(\"https://api.github.com/users/onurerdemiroglu\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"response should be okay to process\", function () { \r",
									"    pm.response.to.not.be.error; \r",
									"    pm.response.to.not.have.jsonBody(\"\"); \r",
									"    pm.response.to.not.have.jsonBody(\"error\"); \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/search/users?q={{username}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"search",
								"users"
							],
							"query": [
								{
									"key": "q",
									"value": "{{username}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Repositories",
			"item": [
				{
					"name": "List Repositories For Auth User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Check response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].name).to.eql(\"CicekSepeti_Postman_Usage\"); \r",
									"    pm.expect(jsonData[0].full_name).to.eql(\"ciceksepetibp/CicekSepeti_Postman_Usage\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"response should be okay to process\", function () { \r",
									"    pm.response.to.not.be.error; \r",
									"    pm.response.to.not.have.jsonBody(\"\"); \r",
									"    pm.response.to.not.have.jsonBody(\"error\"); \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/repos",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"repos"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Repositories For a User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Check response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].id).to.eql(420131877); \r",
									"    pm.expect(jsonData[0].owner.login).to.eql(\"onurerdemiroglu\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"response should be okay to process\", function () { \r",
									"    pm.response.to.not.be.error; \r",
									"    pm.response.to.not.have.jsonBody(\"\"); \r",
									"    pm.response.to.not.have.jsonBody(\"error\"); \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{username}}/repos",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{username}}",
								"repos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a Repository For User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Check response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Java-Patika\"); \r",
									"    pm.expect(jsonData.owner.login).to.eql(\"onurerdemiroglu\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"response should be okay to process\", function () { \r",
									"    pm.response.to.not.be.error; \r",
									"    pm.response.to.not.have.jsonBody(\"\"); \r",
									"    pm.response.to.not.have.jsonBody(\"error\"); \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/repos/{{username}}/{{repositoryname}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"repos",
								"{{username}}",
								"{{repositoryname}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a Repository",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Check response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"test\");\r",
									"    pm.expect(jsonData.full_name).to.eql(\"ciceksepetibp/test\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"test\",\r\n  \"description\": \"test\",\r\n  \"private\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/repos/{{exUsername}}/{{exRepositoryName}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"repos",
								"{{exUsername}}",
								"{{exRepositoryName}}",
								"generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Repository",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"  pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/repos/{{exUsername}}/{{delRepositoryName}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"repos",
								"{{exUsername}}",
								"{{delRepositoryName}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Commit",
			"item": [
				{
					"name": "Get a Commit Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Check response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.commit.author.name).to.eql(\"onurerdemirrr\");  \r",
									"    pm.expect(jsonData.commit.message).to.eql(\"ÖDEV - Boks Oyunu\");  \r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"response should be okay to process\", function () { \r",
									"    pm.response.to.not.be.error; \r",
									"    pm.response.to.not.have.jsonBody(\"\"); \r",
									"    pm.response.to.not.have.jsonBody(\"error\"); \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/repos/{{username}}/{{repositoryname}}/commits/{{commitId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"repos",
								"{{username}}",
								"{{repositoryname}}",
								"commits",
								"{{commitId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Commit Comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Check response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].commit.author.name).to.eql(\"onurerdemirrr\");  \r",
									"    pm.expect(jsonData[0].commit.author.email).to.eql(\"onurerdemiroglu@gmail.com\");  \r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"response should be okay to process\", function () { \r",
									"    pm.response.to.not.be.error; \r",
									"    pm.response.to.not.have.jsonBody(\"\"); \r",
									"    pm.response.to.not.have.jsonBody(\"error\"); \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/repos/{{username}}/{{repositoryname}}/commits",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"repos",
								"{{username}}",
								"{{repositoryname}}",
								"commits"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "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",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}